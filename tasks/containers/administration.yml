---

#########################################################
## Podman Container administration module              ##
#########################################################

# Validate global variables.
- name: Validate variables for Podman containers module...
  ansible.builtin.assert:
    that: "varitem is defined"
    fail_msg: "Required variable '{{ varitem }}' has not been provided."
    quiet: true
  loop_control:
    loop_var: varitem
  loop:
    - container_name

#########################################################
## Run command inside container                        ##
#########################################################

# Run command inside container.
- name: Start Podman container...
  when: action == "run_container_command"
  block:

    # Validate required variables
    - name: Validate required variables for action...
      ansible.builtin.assert:
        that: 'item is defined'
        fail_msg: "Required variable '{{ item }}' has not been provided."
        quiet: true
      with_items:
        - container_command
        - container_command_output

    # Clear variable, be sure it is not used from a previous run.
    - name: Clear variable...
      ansible.builtin.set_fact:
        container_command_output: ""
      no_log: true

    # Run command
    - name: Run command in container...
      become: true
      become_user: "{{ podman_vars.service_user }}"
      containers.podman.podman_container_exec:
        name: "{{ container_name }}"
        command: "{{ container_command }}"
        detach: false
        tty: false
      register: command_result

    # Register output
    - name: Register output...
      ansible.builtin.set_fact:
        container_command_output: "{{ command_result.stdout }}"
      no_log: true

#########################################################
## Start container                                     ##
#########################################################

# Start container.
- name: Start Podman container...
  when: action == "start_container"
  block:

    - name: Retrieve userId to enable systemd user base...
      ansible.builtin.getent:
        database: passwd
        key: "{{ podman_vars.service_user }}"

    # Container is not part of a pod
    # Ensure container is started and enabled
    - name: "Ensure container {{ container_name }} is started and enabled..."
      become: true
      become_user: "{{ podman_vars.service_user }}"
      ansible.builtin.systemd:
        name: "container_{{ container_name }}"
        daemon_reload: true
        state: started
        enabled: true
        scope: user
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ getent_passwd[ podman_vars.service_user ].1 }}"


#########################################################
## Stop container                                      ##
#########################################################

# Stop container.
- name: Stop Podman container...
  when: action == "stop_container"
  block:

    # Show information message
    - name: "This part is not (yet) implemented."
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Restart container                                   ##
#########################################################

# Restart container
- name: restart Podman container...
  when: action == "restart_container"
  block:

    # Fetch proper userID for user based D-bus interaction
    - name: Retrieve userId to enable systemd user base...
      ansible.builtin.getent:
        database: passwd
        key: "{{ podman_vars.service_user }}"

    # Restart container through systemd
    - name: "Restart container ({{ container_name }})..."
      become: true
      become_user: "{{ podman_vars.service_user }}"
      ansible.builtin.systemd:
        name: "container_{{ container_name }}"
        state: restarted
        scope: user
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ getent_passwd[ podman_vars.service_user ].1 }}"
      register: restart_result

    # Check result
    - name: " Show restart result..."
      debug:
        msg: "Restarted container ({{ container_name }}) with result {{ restart_result.Result }}"

#########################################################
## Update container                                    ##
#########################################################

# Update container
- name: Update Podman container...
  when: action == "update_container"
  block:

    # Show information message
    - name: "This part is not (yet) implemented."
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Export container                                    ##
#########################################################

# Export container
- name: Export Podman container...
  when: action == "export_container"
  block:

    # Show information message
    - name: "This part is not (yet) implemented."
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Get containers                                    ##
#########################################################
# Get list of all containers and return it in a variable.
# Filter based on container name. Result is returned in variable defined in 'result_var' variable.

# Get containers
- name: Get containers...
  when: action == "get_containers"
  block:

    # Validate required variables
    - name: Validate required variables for action...
      ansible.builtin.assert:
        that: 'item is defined'
        fail_msg: "Required variable '{{ item }}' has not been provided."
        quiet: true
      with_items:
        - container_name
        - result_var

    # List containers from podman
    - name: Gather containers from podman...
      become: true
      become_user: "{{ podman_vars.service_user }}"
      ansible.builtin.shell: "podman ps --all --filter name={{ container_name }}"
      register: podman_containers

    # Set set_fact:
    - name: Set set_fact...
      ansible.builtin.set_fact:
        "{{ result_var }}": "{{ podman_containers.stdout_lines }}"

#########################################################
## Post-actions                                        ##
#########################################################

# Unset variables
- name: Unset variables...
  ansible.builtin.set_fact:
    podman_containers: null
