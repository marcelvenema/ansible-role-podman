---

#########################################################
## Podman Import Container module                      ##
#########################################################

# Validate global variables.
- name: Validate variables for Podman containers module...
  ansible.builtin.assert:
    that: "varitem is defined"
    fail_msg: "Required variable '{{ varitem }}' has not been provided."
    quiet: true
  loop_control:
    loop_var: varitem
  loop:
    - container_repository_url
    - container_name

#########################################################
## Import container image                              ##
#########################################################
# Pull container image, if failed try to use local file
# local file can be http, https, ftp or local file

# If tag is not defined, set value to latest
- name: Register variable (container_repository_tag)
  ansible.builtin.set_fact:
    container_repository_tag: "latest"
  when: container_repository_tag is not defined or container_repository_tag == ""

# Show information
- name: Show information
  ansible.builtin.debug:
    msg: "Get container image from registry ({{ container_repository_url }}). this may take a while..."

# Pull image from repository to local image repository. If failed, lookup local image file.
# become is true to pull into system wide (root) storage
- name: "Pull container image from repository {{ container_repository_url }}:{{ container_repository_tag }}"
  become: true
  become_user: "{{ podman_service_user }}"
  ansible.builtin.command:
    cmd: "podman pull {{ container_repository_url }}:{{ container_repository_tag }}"
  register: pull_result
  ignore_errors: true

# If pull failed, try to use local file
- name: Install local image file
  when: pull_result is failed
  block:

    # Show information message
    - name: Show information message
      ansible.builtin.debug:
        msg: "Cannot pull from container repository, trying to load from file..."

    # Delete local temp file
    - name: "Delete local file /tmp/{{ container_name }}"
      ansible.builtin.file:
        path: "/tmp/{{ container_name }}.tar"
        state: absent

    # repository_url is a local container file, check if file exists on ansible host
    - name: Check if repository_url is a local container file
      ansible.builtin.stat:
        path: "{{ container_repository_url }}"
      register: container_repository_url_result
      delegate_to: localhost

    # Copy image file to destination if local file
    - name: Copy container image file to destination
      ansible.builtin.copy:
        src: "{{ container_repository_url }}"
        dest: "/tmp/{{ container_name }}.tar"
      when: 
        - container_repository_url_result.stat.exists == true

    # Download local file if http or https
    - name: "Download file from {{ container_repository_url }}"
      ansible.builtin.get_url:
        url: "{{ container_repository_url }}"
        dest: "/tmp/{{ container_name }}.tar"
      when: ("http" in container_repository_url) or ("ftp" in container_repository_url) # https is included
        
    # check if container file exists
    - name: "Check if /tmp/{{ container_name }}.tar exists..."
      ansible.builtin.stat:
        path: "/tmp/{{ container_name }}.tar"
      register: container_tar_result

    # Fail if image file not found
    - name: Fail if container image file not found
      ansible.builtin.fail:
        msg: "Repository URL {{ container_repository_url }} not found. Container image file location not found. Cannot continue..."
      when: 
        - container_tar_result.stat.exists == false

    ##################################
    # Checksum image                 # 
    ##################################

    # If checksum contains :, split it in checksum and algorithm
    - name: Split checksum and algorithm
      ansible.builtin.set_fact:
        repository_checksum: "{{ container_repository_checksum.split(':')[1] }}"
        repository_checksum_algorithm: "{{ container_repository_checksum.split(':')[0] }}"
      when: container_repository_checksum is defined and ":" in container_repository_checksum

    # Get checksum of container file.tar
    - name: Get checksum of local container file
      ansible.builtin.stat:
        path: "/tmp/{{ container_name }}.tar"
        checksum_algorithm: "{{ container_repository_checksum_algorithm }}"
        get_checksum: yes
      register: checksum_result
      when : container_repository_checksum is defined 

    # Fail when checksum is not the same
    - name: Fail when checksum is not correct
      ansible.builtin.fail:
        msg: "Checksum of /tmp/{{ container_name }}.tar ({{ checksum_result.stat.checksum }}) is not the same as the provided checksum ({{ repository_checksum }}). Cannot continue..."
      when: 
        - container_repository_checksum is defined
        - checksum_result.stat.checksum != role_repository_checksum

    # Load image from file if pull failed
    # become is true to pull into system wide (root) storage
    - name: "Import container image {{ container_name }} to podman"
      become: true
      ansible.builtin.command: "podman load -i /tmp/{{ container_name }}.tar"
      register: import_result

    # Cleanup image file
    - name: Cleanup container image file
      ansible.builtin.file:
        path: "/tmp/{{ container_name }}.tar"
        state: absent

# Get image info from podman
- name: Gather info on container image
  become: true
  become_user: "{{ podman_service_user }}"
  ansible.builtin.command:
    cmd: "podman image inspect {{ container_repository_url }}:{{ container_repository_tag }}"
  register: images_info

# Find image id, do not use json_query as it is not installed on all systems
- name: Parse image info, select container image id
  ansible.builtin.set_fact:
    image_id: "{{ (images_info.stdout | from_json)[0]['Id'] }}"

##################################
# Container volumes              #
##################################

# Add podman_data_folder before each item in container_volumes
- name: Gather volume folders...
  ansible.builtin.set_fact: 
    _container_volumes: "{% for item in container_volumes %}{{ podman_data_folder }}/{{ item }}{% if not loop.last %},{% endif %}{% endfor %}"

##################################
# Create container               #
##################################

# Set variable if not defined
- name: Register variable (container_priviledged)
  ansible.builtin.set_fact:
    container_privileged: false
  when: container_privileged is not defined or container_privileged is none or container_privileged == ""

# Set variable if not defined
- name: Register variable (container_security_opt)
  ansible.builtin.set_fact:
    container_security_opt: "unset"
  when: container_security_opt is not defined or container_security_opt is none or container_security_opt == ""

# Create podman container without security options
- name: "Create container {{ container_name }} (no security_opt) with id {{ image_id }}..."
  become: true
  become_user: "{{ podman_service_user }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "{{ image_id }}"
    arch: "{{ container_arch | default(omit) }}"
    ports: "{{ container_ports | default(omit) }}"
    volumes: "{{ _container_volumes | default(omit) }}"
    command: "{{ container_command | default(omit) }}"
    restart_policy: always
    privileged: "{{ container_privileged | default(false) | bool }}"
    cap_add: "{{ container_cap_add | default(omit) }}"
    user: "{{ container_user | default (omit) }}"
    env: "{{ container_env | default(omit) }}"
  when: container_security_opt is not defined or container_security_opt is none or container_security_opt == "unset"

# Create podman container with security options
- name: "Create container {{ container_name }} (security_opt) with id {{ image_id }}..."
  become: true
  become_user: "{{ podman_service_user }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "{{ image_id }}"
    arch: "{{ container_arch | default(omit) }}"
    ports: "{{ container_ports | default(omit) }}"
    volumes: "{{ _container_volumes | default(omit) }}"
    command: "{{ container_command | default(omit) }}"
    restart_policy: always
    privileged: "{{ container_privileged | default(false) | bool }}"
    cap_add: "{{ container_cap_add | default(omit) }}"
    security_opt: "{{ container_security_opt | default(omit) }}"
    user: "{{ container_user | default(omit) }}"
    env: "{{ container_env | default(omit) }}"
  when: container_security_opt != "unset"

##################################
# Auto-start                     #
##################################

# - name: Generate systemd unit file for container
#   become: true
#   become_user: "{{ podman_service_user }}"
#   containers.podman.podman_generate_systemd:
#     name: "{{ container_name }}"
#     new: true
#     no_header: true
#     dest: ~/.config/systemd/user/

# - name: Ensure container is started and enabled
#   become: true
#   become_user: "{{ podman_service_user }}"
#   ansible.builtin.systemd:
#     name: "container-{{ container_name }}"
#     daemon_reload: true
#     state: started
#     enabled: true

#########################################################
## Post-actions                                        ##
#########################################################

# Unset variables
- name: Unset variables
  ansible.builtin.set_fact:
    container_repository_url: null
    container_name: null
    container_ports: null
    container_volumes: null
    _container_volumes: null
    container_env: null
    container_command: null
    container_user: null
    container_security_opt: null
    container_privileged: null
    container_cap_add: null
    container_repository_tag: null
    container_repository_checksum: null
    image_id: null
    pull_result: null
    import_result: null
    images_info: null
    container_tar_result: null
    checksum_result: null
    container_repository_url_result: null
