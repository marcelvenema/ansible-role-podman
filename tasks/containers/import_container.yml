---

#########################################################
## Podman Import Container module                      ##
#########################################################

# Register variables to facts when looped play
- name: "Register container variables (looped)..."
  ansible.builtin.set_fact:
    container_repository_url: "{{ item.value.container_repository_url }}"
    container_name: "{{ item.value.container_name }}"
    container_repository_tag: "{{ item.value.container_repository_tag | default(omit) }}"
    container_volumes: "{{ item.value.container_volumes }}"
    container_quadlet_options: "{{ item.value.container_quadlet_options }}"
    container_ports: "{{ item.value.container_ports | default(omit) }}"
    container_env: "{{ item.value.container_env | default(omit) }}"
    container_command: "{{ item.value.container_command| default(omit) }}"
    container_security_opt: "{{ item.value.container_security_opt | default(omit) }}"
    container_cap_add: "{{ item.value.container_cap_add | default(omit) }}"
    container_healthcheck: "{{ item.value.container_healthcheck | default(omit) }}"
    container_healthcheck_fail: "{{ item.value.container_healthcheck_fail | default('none') }}"
    container_healtcheck_interval: "{{ item.value.container_healthcheck_interval | default(omit) }}"
    container_healthcheck_retries: "{{ item.value.container_healthcheck_retries | default(omit) }}"
    container_healthcheck_start: "{{ item.value.container_healthcheck_start | default(omit) }}"
    container_healthcheck_timeout: "{{ item.value.container_healthcheck_timeout | default(omit) }}"
  when:
   - item.value.container_name is defined

# Validate global variables.
- name: Validate variables for Podman containers module...
  ansible.builtin.assert:
    that: "varitem is defined"
    fail_msg: "Required variable '{{ varitem }}' has not been provided."
    quiet: true
  loop_control:
    loop_var: varitem
  loop:
    - container_repository_url
    - container_name

#########################################################
## Import container image                              ##
#########################################################
# Pull container image, if failed try to use local file
# local file can be http, https, ftp or local file

# If tag is not defined, set value to latest
- name: Register variable (container_repository_tag)
  ansible.builtin.set_fact:
    container_repository_tag: "latest"
  when: container_repository_tag is not defined or container_repository_tag == ""

# CONTAINER IMAGE REGISTRY
# Get container image direct from registry
- name: "Get container image from registry {{ container_repository_url }}:{{ container_repository_tag }}..."
  when: container_repository_url != "" and not container_repository_url.endswith(".tar")
  block:

    # Show information
    - name: Show information
      ansible.builtin.debug:
        msg: "Get container image from registry ({{ container_repository_url }}). this may take a while..."

    # Pull image from repository to local image repository. If failed, lookup local image file.
    # become is true to pull into system wide (root) storage
    - name: "Pull container image from repository {{ container_repository_url }}:{{ container_repository_tag }}..."
      become: true
      become_user: "{{ podman_vars.service_user }}"
      ansible.builtin.command:
        cmd: "podman pull {{ container_repository_url }}:{{ container_repository_tag }}"
      register: pull_result
      ignore_errors: true

# LOCAL CONTAINER IMAGE FILE
# If local file, load image from local file
- name: "Install local image file {{ container_repository_url }}..."
  block:

    # Show information message
    - name: Show information message
      ansible.builtin.debug:
        msg: "Load container image from local file {{ container_repository_url }}. This may take a while..."

    # Delete local temp file
    - name: "Delete local file /tmp/{{ container_name }}..."
      ansible.builtin.file:
        path: "/tmp/{{ container_name }}.tar"
        state: absent

    # repository_url is a local container file, check if file exists on ansible host
    - name: Check if repository_url is a local container file...
      ansible.builtin.stat:
        path: "{{ container_repository_url }}"
      register: container_repository_url_result
      delegate_to: localhost

    # Copy image file to destination if local file
    - name: Copy container image file to destination...
      ansible.builtin.copy:
        src: "{{ container_repository_url }}"
        dest: "/tmp/{{ container_name }}.tar"
      when:
        - container_repository_url_result.stat.exists == true

    # Download local file if http or https
    - name: "Download file from {{ container_repository_url }}..."
      ansible.builtin.get_url:
        url: "{{ container_repository_url }}"
        dest: "/tmp/{{ container_name }}.tar"
      when: ("http" in container_repository_url) or ("ftp" in container_repository_url) # https is included

    # check if container file exists
    - name: "Check if /tmp/{{ container_name }}.tar exists..."
      ansible.builtin.stat:
        path: "/tmp/{{ container_name }}.tar"
      register: container_tar_result

    # Fail if image file not found
    - name: Fail if container image file not found...
      ansible.builtin.fail:
        msg: "Repository URL {{ container_repository_url }} not found. Container image file location not found. Cannot continue..."
      when:
        - container_tar_result.stat.exists == false

    ##################################
    # Checksum image                 #
    ##################################

    # If checksum is defined, check item
    # bug, check container_repository_checksum is not defined is not working
    - name: Parse checksum image
      when: not (container_repository_checksum | string is search('__omit_place_holder__'))
      block:

        # If checksum contains :, split it in checksum and algorithm
        - name: Split checksum and algorithm
          ansible.builtin.set_fact:
            repository_checksum: "{{ container_repository_checksum.split(':')[1] }}"
            repository_checksum_algorithm: "{{ container_repository_checksum.split(':')[0] }}"
          when:
            - "':' in container_repository_checksum"

        # Get checksum of container file.tar
        - name: Get checksum of local container file
          ansible.builtin.stat:
            path: "/tmp/{{ container_name }}.tar"
            checksum_algorithm: "{{ container_repository_checksum_algorithm }}"
            get_checksum: yes
          register: checksum_result

        # Fail when checksum is not the same
        - name: Fail when checksum is not correct
          ansible.builtin.fail:
            msg: "Checksum of /tmp/{{ container_name }}.tar ({{ checksum_result.stat.checksum }}) is not the same as the provided checksum ({{ repository_checksum }}). Cannot continue..."
          when:
            - checksum_result.stat.checksum != container_repository_checksum

    ##################################
    # Load image                     #
    ##################################

    # Load image from file if pull failed
    - name: "Import container image {{ container_name }} to podman..."
      become: true
      become_user: "{{ podman_vars.service_user }}"
      ansible.builtin.command: "podman load -i /tmp/{{ container_name }}.tar"
      register: import_result

    # Set variable
    - name: Register variable (image_name)
      ansible.builtin.set_fact:
        image_name: "{{ import_result.stdout | regex_search('Loaded image:\\s*(.*)', '\\1') | first }}"
        container_repository_tag: "{{ import_result.stdout | regex_search('Loaded image:\\s*(.*)', '\\1') | last  }}"

    # Get image info from podman
    - name: Gather info on container image (file)...
      become: true
      become_user: "{{ podman_vars.service_user }}"
      ansible.builtin.command:
        cmd: "podman image inspect {{ image_name }}"
      register: images_info

    # Find image id, do not use json_query as it is not installed on all systems
    - name: Find image id...
      ansible.builtin.set_fact:
        image_id: "{{ (images_info.stdout | from_json)[0]['Id'] }}"
    
    # Debug message
    - name: Debug message
      ansible.builtin.debug:
        msg: "{{ image_id }}"
  
    # Set default quadlet options for static container images
    - name: Register variable (container_quadlet_options)
      ansible.builtin.set_fact:
        container_quadlet_options:
          - "Environment={{ container_env | default(omit) }}"
          - |
            [Install]
            WantedBy=default.target
      when:
        - container_quadlet_options is not defined or container_quadlet_options == ""




# # Get image info from podman
# # only if pull was successful
# - name: Gather info on container image...
#   become: true
#   become_user: "{{ podman_vars.service_user }}"
#   ansible.builtin.command:
#     cmd: 'podman image inspect "{{ container_repository_url }}:{{ container_repository_tag }}"'
#   register: images_info
#   when: pull_result is defined or pull_result is not failed

# # Find image id, do not use json_query as it is not installed on all systems
# - name: Find image id
#   ansible.builtin.set_fact:
#     #image_id: "{{ (images_info.stdout | from_json)[0]['Id'] }}"
#     image_id: "{{ container_repository_url }}:{{ container_repository_tag }}"
#   when: pull_result is defined

# # Debug message
# - name: Debug message
#   ansible.builtin.debug:
#     msg: "{{ image_id }}"


# Add podman_data_folder before each item in container_volumes
- name: Gather volume folders...
  ansible.builtin.set_fact:
    _container_volumes: "{% for item in container_volumes %}{{ podman_vars.data_folder }}/{{ item }}{% if not loop.last %},{% endif %}{% endfor %}"

##################################
# Create container               #
##################################

# Set variable if not defined
- name: Register variable (container_priviledged)...
  ansible.builtin.set_fact:
    container_privileged: false
  when: container_privileged is not defined or container_privileged is none or container_privileged == ""

# Set variable if not defined
- name: Register variable (container_security_opt)
  ansible.builtin.set_fact:
    container_security_opt: "unset"
  when: container_security_opt is not defined or container_security_opt is none or container_security_opt == ""

# Debug message
- name: Debug message
  ansible.builtin.debug:
    msg: "{{ container_env }}"
  when: container_env is defined


# Create podman container without security options
- name: "Create container {{ container_name }} (no security_opt) with id {{ image_id }}..."
  become: true
  become_user: "{{ podman_vars.service_user }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    pod: "{{ container_pod | default(omit) }}"
    image: "{{ image_id }}"
    #tag: "{{ container_repository_tag }}"
    state: quadlet
    arch: "{{ container_arch | default(omit) }}"
    ports: "{{ container_ports | default(omit) }}"
    volumes: "{{ _container_volumes | default(omit) }}"
    command: "{{ container_command | default(omit) }}"
    privileged: "{{ container_privileged | default(false) | bool }}"
    cap_add: "{{ container_cap_add | default(omit) }}"
    user: "{{ container_user | default (omit) }}"
    healthcheck: "{{ container_healthcheck | default(omit) }}"
    healthcheck_failure_action: "{{ container_healthcheck_fail | default('none') }}"
    healthcheck_retries: "{{ container_healthcheck_retries | default(omit) }}"
    healthcheck_interval: "{{ container_healthcheck_interval | default(omit) }}"
    healthcheck_start_period: "{{ container_healthcheck_start | default(omit) }}"
    healthcheck_timeout: "{{ container_healthcheck_timeout | default(omit) }}"
    # env: "{{ container_env | default(omit) }}"
    quadlet_filename: "container_{{ container_name }}"
    quadlet_file_mode: '0640'
    quadlet_options: "{{ container_quadlet_options }}"
  when: container_security_opt is not defined or container_security_opt is none or container_security_opt == "unset"

# Create podman container with security options
- name: "Create container {{ container_name }} (security_opt) with id {{ image_id }}..."
  become: true
  become_user: "{{ podman_vars.service_user }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    pod: "{{ container_pod | default(omit) }}"
    image: "{{ image_id }}"
    #tag: "{{ container_repository_tag }}"
    state: quadlet
    arch: "{{ container_arch | default(omit) }}"
    ports: "{{ container_ports | default(omit) }}"
    volumes: "{{ _container_volumes }}"
    command: "{{ container_command | default(omit) }}"
    privileged: "{{ container_privileged | default(false) | bool }}"
    cap_add: "{{ container_cap_add | default(omit) }}"
    security_opt: "{{ container_security_opt | default(omit) }}"
    user: "{{ container_user | default(omit) }}"
    healthcheck: "{{ container_healthcheck | default(omit) }}"
    healthcheck_failure_action: "{{ container_healthcheck_fail | default('none') }}"
    healthcheck_retries: "{{ container_healthcheck_retries | default(omit) }}"
    healthcheck_interval: "{{ container_healthcheck_interval | default(omit) }}"
    healthcheck_start_period: "{{ container_healthcheck_start | default(omit) }}"
    healthcheck_timeout: "{{ container_healthcheck_timeout | default(omit) }}"
    env: "{{ container_env | default(omit) }}"
    quadlet_filename: "container_{{ container_name }}"
    quadlet_file_mode: '0640'
    quadlet_options: "{{ container_quadlet_options }}"
  when: container_security_opt != "unset"
  register: container_create_result

# Debug message
- name: Debug message
  ansible.builtin.debug:
    msg: "Container {{ container_name }} created with id {{ image_id }}. Result: {{ container_create_result }}"


# Create podman container with security options
#- name: "Create container {{ container_name }} (security_opt) with id {{ image_id }}..."
#  become: true
#  become_user: "{{ podman_service_user }}"
#  containers.podman.podman_container:
#    name: "{{ container_name }}"
#    image: "{{ image_id }}"
#    arch: "{{ container_arch | default(omit) }}"
#    ports: "{{ container_ports | default(omit) }}"
#    volumes: "{{ _container_volumes | default(omit) }}"
#    command: "{{ container_command | default(omit) }}"
#    restart_policy: always
#    privileged: "{{ container_privileged | default(false) | bool }}"
#    cap_add: "{{ container_cap_add | default(omit) }}"
#    security_opt: "{{ container_security_opt | default(omit) }}"
#    user: "{{ container_user | default(omit) }}"
#    env: "{{ container_env | default(omit) }}"
#  when: container_security_opt != "unset" and container_name != vault

# # Add volume opttion U in case of rootless binded container volume on base filesystem
# - name: Add rootless bind volume option
#   become: true
#   become_user: "{{ podman_vars.users.service_user }}"
#   ansible.builtin.lineinfile:
#     path: "~/.config/containers/systemd/container_{{ container_name }}.container"
#     regex: 'Volume=(.*)$'
#     line: 'Volume=\1,U'
#     backrefs: true
#   when: podman_bind_override


##################################
# Auto-start                     #
##################################
#- name: Generate container quadlet file...
#  become: true
#  become_user: "{{ podman_service_user }}"
#  containers.podman.podman_container:
#    name: "{{ container_name }}"
#    state: quadlet
#    image: "{{ image_id }}"
#    arch: "{{ container_arch | default(omit) }}"
#    ports: "{{ container_ports | default(omit) }}"
##    volumes: "{{ container_volumes }}"
#    volumes:
#      - "{{ container_volumes.volume1 }}"
#      - "{{ container_volumes.volume2 }}"
#      - "{{ container_volumes.volume3 }}"
#    command: "{{ container_command | default(omit) }}"
#    privileged: "{{ container_privileged | default(false) | bool }}"
#    cap_add: "{{ container_cap_add | default(omit) }}"
#    security_opt: "{{ container_security_opt | default(omit) }}"
#    user: "{{ container_user | default(omit) }}"
#    env: "{{ container_env | default(omit) }}"
#    quadlet_filename: "container_{{ container_name }}"
#    quadlet_file_mode: '0640'
#    quadlet_options:
#      - "AutoUpdate=registry"
#      - "Pull=newer"
#      - |
#        [Install]
#        WantedBy=default.target
#  when:
#    - container_security_opt != "unset"
#    -  not container_pod is defined

# - name: Generate systemd unit file for container
#   become: true
#   become_user: "{{ podman_service_user }}"
#   containers.podman.podman_generate_systemd:
#     name: "{{ container_name }}"
#     new: true
#     no_header: true
#     dest: ~/.config/systemd/user/
- name: Retrieve userId to enable systemd user base...
  ansible.builtin.getent:
    database: passwd
    key: "{{ podman_vars.service_user }}"


# Container is not part of a pod
# Ensure container is started and enabled
- name: "Ensure container {{ container_name }} is started and enabled..."
  become: true
  become_user: "{{ podman_vars.service_user }}"
  ansible.builtin.systemd:
    name: "container_{{ container_name }}"
    daemon_reload: true
    state: started
    enabled: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ getent_passwd[ podman_vars.service_user ].1 }}"
  when:
   - container_pod is not defined

# Container is part of a pod
# Ensure pod is started and enabled
- name: Ensure pod is started and enabled...
  become: true
  become_user: "{{ podman_vars.service_user }}"
  ansible.builtin.systemd:
    name: "{{ container_pod | splitext | first }}.pod"
    daemon_reload: true
    state: started
    enabled: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ getent_passwd[ podman_vars.service_user ].1 }}"
  when:
   - container_pod is defined
   - ansible_loop.last

#########################################################
## Post-actions                                        ##
#########################################################

# Unset variables
- name: Unset variables
  ansible.builtin.set_fact:
    container_repository_url: null
    container_name: null
    container_ports: null
    container_volumes: null
    _container_volumes: null
    container_env: null
    container_command: null
    container_user: null
    container_security_opt: null
    container_privileged: null
    container_cap_add: null
    container_repository_tag: null
    container_repository_checksum: null
    image_id: null
    pull_result: null
    import_result: null
    images_info: null
    container_tar_result: null
    checksum_result: null
    container_repository_url_result: null
